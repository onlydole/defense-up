name: Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.3'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Generate SLSA provenance attestation
          provenance: mode=max
          # Generate in-toto SBOM attestation  
          sbom: true

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: cyclonedx-json
          output-file: container-sbom.json
          upload-artifact: false
          upload-release-assets: false

      - name: Sign container image
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

      - name: Attest SBOM to container
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          cosign attest --yes \
            --predicate container-sbom.json \
            --type cyclonedx \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${DIGEST}

      - name: Generate build provenance attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}

      - name: Generate SBOM attestation for GitHub
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: container-sbom.json

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            container-sbom.json
          body: |
            ## Container Image
            
            Pull the image:
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            **Image digest:** `${{ steps.build.outputs.digest }}`
            
            ## Supply Chain Security
            
            This release includes multiple layers of attestation and verification:
            
            ### 1. Container Signatures
            Verify the image signature:
            ```bash
            cosign verify ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com
            ```
            
            ### 2. SBOM Attestation
            Verify and download the SBOM:
            ```bash
            # Verify SBOM attestation
            cosign verify-attestation ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
              --type cyclonedx \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com
            
            # Download SBOM from attestation
            cosign download attestation ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
              --predicate-type cyclonedx | jq -r '.payload' | base64 -d | jq '.predicate' > sbom.json
            ```
            
            ### 3. SLSA Provenance
            Verify build provenance:
            ```bash
            cosign verify-attestation ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
              --type slsaprovenance \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com
            ```
            
            ### 4. GitHub Attestations
            View all attestations in GitHub UI: https://github.com/${{ github.repository }}/attestations
            
            Download via GitHub CLI:
            ```bash
            gh attestation download ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} -o attestations/
            ```
            
            ## What's Included
            
            - **Container image** for linux/amd64 and linux/arm64
            - **Signatures** on all image tags and digest
            - **SBOM** (Software Bill of Materials) in CycloneDX format
            - **SLSA Build Provenance** (Level 3)
            - **GitHub Attestations** for build provenance and SBOM
            
            The SBOM includes all components in the container:
            - Python packages (direct and transitive dependencies)
            - System packages from the base image
            - Image layers and metadata